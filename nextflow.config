/*
 * -------------------------------------------------
 *  NF-TCoffee-tutorial Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  // Pipeline version
  version = '0.1.0'

  // Minimum version of nextflow required
  nf_required_version = '0.27.0'

  help = false
  reads = "data/*{1,2}.fastq.gz"
  singleEnd = false
  outdir = './results'
  version = version
  nf_required_version = nf_required_version
  igenomes_base = "./iGenomes"
  clusterOptions = false
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  docker {
    includeConfig 'conf/base.config'
    includeConfig 'conf/docker.config'
    includeConfig 'conf/igenomes.config'
  }
  aws {
    includeConfig 'conf/base.config'
    includeConfig 'conf/aws.config'
    includeConfig 'conf/igenomes.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
    container = ' singularity pull shub://edgano/TCoffee-NatureProtocol-nf'
} 
timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/NF-TCoffee-tutorial_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/NF-TCoffee-tutorial_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/NF-TCoffee-tutorial_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/NF-TCoffee-tutorial_dag.html"
}

manifest {
  homePage = 'https://github.com/edgano/TCoffee-NatureProtocol-nf'
  description = 'This pipeline allows the user to start with TCoffee and how it works'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
